package Controller;

import Model.Measurement;
import com.google.gson.Gson;

import java.util.Observable;
import java.util.Observer;

/**
* The main class which starts the generators, receives the measurements from them and sends the measurements to the server.
* 
* @author Florin Ciornei
* 
*/
public class Controller implements Observer {

	private Client client;
	private HeartRateGenerator heartRateGenerator;
	private BloodPresureGenerator bloodPressureGenerator;
	private TemperatureGenerator temperatureGenerator;

	public static int patientId = 1;

	/**
	 * The constructor will start the measurement generators and create a new client.
	 */
	public Controller() {
		client = new Client();
		client.connect("::1", 11000);
		heartRateGenerator = new HeartRateGenerator();
		heartRateGenerator.addObserver(this);
		heartRateGenerator.start();
		bloodPressureGenerator = new BloodPresureGenerator();
		bloodPressureGenerator.addObserver(this);
		bloodPressureGenerator.start();
		temperatureGenerator = new TemperatureGenerator();
		temperatureGenerator.addObserver(this);
		temperatureGenerator.start();
	}

	/** 
	 * The update method is from the Observer design pattern. It will receive the measurements generated by the generators.
	 */
	public void update(Observable o, Object arg) {
		try {
			client.send((Measurement) arg);
			Gson gson = new Gson();
			System.out.println("Sent -> " + gson.toJson(arg));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * The main method which creates the controller.
	 * @param args - parameters from the console
	 */
	public static void main(String[] args) {
		new Controller();
	}

}
